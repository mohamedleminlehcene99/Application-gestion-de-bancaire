/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ContactDto } from '../models/contact-dto';
import { delete2 } from '../fn/contact/delete-2';
import { Delete2$Params } from '../fn/contact/delete-2';
import { findAll3 } from '../fn/contact/find-all-3';
import { FindAll3$Params } from '../fn/contact/find-all-3';
import { findAllContactsByUserId } from '../fn/contact/find-all-contacts-by-user-id';
import { FindAllContactsByUserId$Params } from '../fn/contact/find-all-contacts-by-user-id';
import { findContactById } from '../fn/contact/find-contact-by-id';
import { FindContactById$Params } from '../fn/contact/find-contact-by-id';
import { save2 } from '../fn/contact/save-2';
import { Save2$Params } from '../fn/contact/save-2';

@Injectable({ providedIn: 'root' })
export class ContactService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll3()` */
  static readonly FindAll3Path = '/contacts/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll3$Response(params?: FindAll3$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ContactDto>>> {
    return findAll3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll3(params?: FindAll3$Params, context?: HttpContext): Observable<Array<ContactDto>> {
    return this.findAll3$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ContactDto>>): Array<ContactDto> => r.body)
    );
  }

  /** Path part for operation `save2()` */
  static readonly Save2Path = '/contacts/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save2$Response(params: Save2$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save2(params: Save2$Params, context?: HttpContext): Observable<number> {
    return this.save2$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findContactById()` */
  static readonly FindContactByIdPath = '/contacts/{contact_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findContactById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findContactById$Response(params: FindContactById$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactDto>> {
    return findContactById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findContactById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findContactById(params: FindContactById$Params, context?: HttpContext): Observable<ContactDto> {
    return this.findContactById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactDto>): ContactDto => r.body)
    );
  }

  /** Path part for operation `delete2()` */
  static readonly Delete2Path = '/contacts/{contact_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete2()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete2$Response(params: Delete2$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete2(params: Delete2$Params, context?: HttpContext): Observable<void> {
    return this.delete2$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAllContactsByUserId()` */
  static readonly FindAllContactsByUserIdPath = '/contacts/user/{user_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllContactsByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllContactsByUserId$Response(params: FindAllContactsByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ContactDto>>> {
    return findAllContactsByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllContactsByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllContactsByUserId(params: FindAllContactsByUserId$Params, context?: HttpContext): Observable<Array<ContactDto>> {
    return this.findAllContactsByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ContactDto>>): Array<ContactDto> => r.body)
    );
  }

}
